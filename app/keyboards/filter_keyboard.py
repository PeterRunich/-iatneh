from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from ...database.db import Sqlite
"""–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –ø–∞–Ω–µ–ª—å —Å –∂–∞–Ω—Ä–∞–º–∏ –∏ pagination"""

# current_page_number - –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# current_page_number - –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async def filter_kb_builder(current_page_number, limit, genres=[]):
    last_page_number = int(Sqlite().count_genres() / limit) # —Ä–∞—Å—á—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    if current_page_number > last_page_number: # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ç–æ —Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–æ–∑–º–æ–∂–Ω—É—é
        current_page_number = last_page_number
    elif current_page_number < 1: # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 1 —Ç–æ —Å—Ç–∞–≤–∏–º 1
        current_page_number = 1

    kb = InlineKeyboardMarkup(row_width=3) # –±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–∞–ª—å—à–µ (row_width - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
    offset = (current_page_number - 1) * limit # —Ä–∞—Å—á—ë—Ç —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–¥
    data = Sqlite().get_genres(limit, offset)

    if current_page_number > 1: # —Ä–∞—Å—á—ë—Ç –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        prev_page_number = current_page_number - 1
    else:
        prev_page_number = 1

    if current_page_number < last_page_number: # —Ä–∞—Å—á—ë—Ç –Ω–æ–º–µ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        next_page_number = current_page_number + 1
    else:
        next_page_number = last_page_number

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ pagination
    btns = [
        InlineKeyboardButton("<", callback_data=f"cq1:move_to:{prev_page_number}"),
        InlineKeyboardButton(f"{current_page_number}/{last_page_number}", callback_data='cq1:no_action:'),
        InlineKeyboardButton(">", callback_data=f"cq1:move_to:{next_page_number}")
    ]

    kb = await highlight_selected_genres(kb, data, genres) # –¥–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã –≤ –±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–æ–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ row_width –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ—Ç–æ–¥–æ–º insert)

    kb.row(*btns) # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ pagination –≤ –±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb.add(InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –Ω–æ–º–µ—Ä—É', callback_data="cq1:go_to_page:"))
    kb.add(InlineKeyboardButton('–ü–æ–∏—Å–∫ üîé', callback_data="cq1:search:"))

    return kb # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø–∞–Ω–µ–ª—å

async def highlight_selected_genres(kb, data, genres):
    for genre_data in data:
        text = genre_data[1]

        if str(genre_data[0]) in genres:
            text += " ‚úÖ"

        kb.insert(InlineKeyboardButton(text, callback_data=f"cq1:add_to_filter:{genre_data[0]}"))

    return kb
